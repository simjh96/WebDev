Those expressions that are evaluated immediately use the ${} syntax. 
Expressions whose evaluation is deferred use the #{} syntax.

Because of its multiphase lifecycle, JavaServer Faces technology uses mostly deferred evaluation expressions. During the lifecycle, component events are handled, data is validated, and other tasks are performed in a particular order. Therefore, a JavaServer Faces implementation must defer evaluation of expressions until the appropriate point in the lifecycle.



mvc
	controller가 @WebServlet("/board/DeleteProcess.do") 으로 받아서
		protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { 를 통해서
					ReplyBoardDto replyBoardDto = new ReplyBoardDto();
					ReplyBoardDao replyBoardDao = new ReplyBoardDao();
		Model의 Dao Dto init 해서 "/WEB-INF/board/board_list.jsp" view로 넘겨줌


resource="com/..." 왜 여기가 root 지? -> compile 후에 다 java 폴더안으로 들어가기 때문!
	그래서 com/simjh96/... 으로 씀

mybatis에 parameter dto 넘기고 parameterType="Dto" 해주면 안에 있는거 그냥 접근 가능 el로



[총정리]
Controller
	url mapping 되며 view로 redirect 하는 servlet
	@WebServlet("/member/MemberInfo.do")
		web url은 / 로 시작, 나머지는 /없이 시작
		java file은 root가 java임, dir 칠때 여기서부터 시작(servlet도 컴파일 돼서 java 에 안착)
		web 파일은 src/main/webapp이 시작
	
	1. 주로 form에서 post나 get으로 request 받음
	2. Model의 객체를 이용해 DAO(Session(), queary)로 DTO 생성
	3. request 에 setAttribute 해서 dispatcher.forward 해줌

Model
	dto, dao, mybatisConn 등 대부분 객체 여기서 정의
	mybatis 에서
		config(db.properties, typeAllias, mapper) 하고 
			mapper.xml에 queary를 id로 받아서 매핑 해줌
				input 받아서 paramType 으로 typecasting 해주고
					defered el 을 이용해서 #{ 객체 안 변수 접근 가능 }
				sql 결과를 row 하나당 resultType 하나로 반환해 준다
					dto 에서 column 이름과 같은 field로 setter 해줌
					row 여러개 나오면 sqlSession.selectList(id) 로 받아줘야함
	MybatisConn
		SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(resource)) 로 세션 열어줌

	DAO
		Session 받아서 DTO 생성해서 반환해줌
			List<Dto>로 줄 수 도 있음 <-> sqlSession.selectList(id)


View
	rendering 되는 jsp 화면
	jstl/core, jstl/fmt 정도만 사용
	js와 ajax 사용
	el로 ${} 뚫어서 사용


EL(expression language)
	객체안에 내용 받아오는 문법
	객체안에 변수들 바로 받아 볼 수 있음
	${} 하면 컴파일 전에 변수 넣을 수 있고
	#{} 하면 컴파일 후에 변수 넣을 수 있음(그래서 string concat이 자동으로 안됨)

근데 ${} 랑 #{} 랑 차이가 뭐지??
뭐가 컴파일 될때 기준이지?
	jsp가 컴파일 될때?
		jsp는 언제 컴파일 되지?
		servlet과 동일한거니까 servlet 컴파일 될때 같이 될것 같은데
	request 들어올때 기준으로 변수 다 들어온 상탠데 $, # 기준이 뭘까